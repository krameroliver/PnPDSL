/*
 * generated by Xtext 2.20.0
 */
package de.senacor.com.smt.dsl.serializer;

import com.google.inject.Inject;
import de.senacor.com.smt.dsl.services.SimpleDSLGrammarAccess;
import de.senacor.smt.model.smtmetamodel.Document;
import de.senacor.smt.model.smtmetamodel.Entity;
import de.senacor.smt.model.smtmetamodel.Field;
import de.senacor.smt.model.smtmetamodel.Relationship;
import de.senacor.smt.model.smtmetamodel.SmtmetamodelPackage;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class SimpleDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SimpleDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SmtmetamodelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SmtmetamodelPackage.DOCUMENT:
				sequence_Document(context, (Document) semanticObject); 
				return; 
			case SmtmetamodelPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case SmtmetamodelPackage.FIELD:
				sequence_Field(context, (Field) semanticObject); 
				return; 
			case SmtmetamodelPackage.RELATIONSHIP:
				sequence_Relationship(context, (Relationship) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Document returns Document
	 *
	 * Constraint:
	 *     (name=EString entites+=Entity*)
	 */
	protected void sequence_Document(ISerializationContext context, Document semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (name=EString (fields+=Field fields+=Field*)? (relationships+=Relationship relationships+=Relationship*)?)
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Field returns Field
	 *
	 * Constraint:
	 *     (name=EString type=DataType? length=INT? preciscion=INT? scale=INT?)
	 */
	protected void sequence_Field(ISerializationContext context, Field semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Relationship returns Relationship
	 *
	 * Constraint:
	 *     (name=EString toEntity=[Entity|QualifiedName])
	 */
	protected void sequence_Relationship(ISerializationContext context, Relationship semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmtmetamodelPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmtmetamodelPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, SmtmetamodelPackage.Literals.RELATIONSHIP__TO_ENTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmtmetamodelPackage.Literals.RELATIONSHIP__TO_ENTITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRelationshipAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRelationshipAccess().getToEntityEntityQualifiedNameParserRuleCall_5_0_1(), semanticObject.eGet(SmtmetamodelPackage.Literals.RELATIONSHIP__TO_ENTITY, false));
		feeder.finish();
	}
	
	
}
